var choicesTokens=new Array,choicesHolders=new Array,totalTokens=0,getBalance=function(t,e){0!=parseInt(tokenContractAddress)?erc20Contract.balanceOf(t,function(t,o){e(parseFloat(web3.fromWei(o)))}):web3.eth.getBalance(t,function(t,o){var n=parseFloat(web3.fromWei(o,"ether"));e(n)})},reloadIfAccountChanged=function(){web3.eth.accounts[0]!=account?window.location.reload():setTimeout(function(){reloadIfAccountChanged()},1e3)},reRenderChart=function(){for(var t=1;t<choicesHolders.length;t++){var e=parseInt(100*choicesTokens[t]/totalTokens);$("#tokenperc-"+t).html(e+"%"),$("#tokencount-"+t).html(choicesTokens[t]),$("head").append("<style>#line-"+t+":before{width:"+e+"% !important;}</style>")}},fetchVotes=function(t,e){distrivoteContract.getVoters(contractHash,t,e,function(o,n){var c=n[0],a=n[1];$.each(c,function(t,e){var o=parseInt(a[t].toString());getBalance(e,function(t){var t=parseFloat(t.toString());choicesTokens[o]+=t,totalTokens+=t,reRenderChart()}),choicesHolders[o]++}),c.length==t?setTimeout(function(){fetchVotes(t,e+t)},200):$(".loader").hide()})},waitForWeb3=function(){"undefined"==typeof web3?(console.log("Meta Mask required!"),setTimeout(function(){waitForWeb3()},200)):(web3=new Web3(web3.currentProvider),web3.eth.accounts.length>0?setTimeout(function(){account=web3.eth.accounts[0],reloadIfAccountChanged(),web3.version.getNetwork(function(t,e){switch(e){case"1":console.log("This is mainnet");break;case"2":console.log("This is the deprecated Morden test network.");break;case"3":console.log("This is the ropsten test network.");break;default:console.log("This is an unknown network.")}}),startApp()},500):setTimeout(function(){console.log("no account available"),waitForWeb3()},200))},startApp=function(){ipfs=window.IpfsApi(ipfsHost,ipfsPort,{protocol:ipfsProtocol});var t=document.URL.extract();contractHash=t.hash,ipfs.cat(contractHash,function(t,e){var o="";e.on("readable",function(){var t=e.read();null!=t&&(o+=t)}),e.on("end",function(){var t=JSON.parse(o);renderIPFSMeta(t)})})},voteIt=function(t){console.log(t,contractHash),distrivoteContract=web3.eth.contract(distrivoteContractABI).at(distrivoteContractAddress),distrivoteContract.carbonvote(contractHash,t,function(t,e){if(console.log(t,e),parseInt(e)>0){var o="https://etherscan.io/tx/"+e;$("#success-msg").html('Voted successfully. Check <a href="'+o+'" target="_blank">'+o+"</a> for transaction completion.")}})},renderIPFSMeta=function(t){t=JSON.parse(t),distrivoteContract=web3.eth.contract(distrivoteContractABI).at(distrivoteContractAddress),tokenContractAddress=t.poll_contract,erc20Contract=web3.eth.contract(erc20ABI).at(tokenContractAddress),erc20Symbol=t.poll_symbol,$("#poll_title").html(t.poll_title),$("#poll_description").html(t.poll_description);var e=parseInt(t.poll_num_choices);choicesTokens.push(NaN),choicesHolders.push(NaN);for(var o=1;o<=e;o++){choicesTokens.push(0),choicesHolders.push(0);var n="choice-"+o,c='<div class="box"> <div class="choice_content">'+t[n]+'</div><div class="voteperc"><small id="tokenperc-'+o+'">10%</small></div> <div class="line" id="line-'+o+'"></div><div class="votediv"><span class="voteamount"><span id="tokencount-'+o+'">0</span> '+erc20Symbol+'</span><a class="button votebtn" id="vote-'+n+'" onclick="voteIt('+o+')">VOTE</a></div></div>';$("#all_choices").append(c)}distrivoteContract.getAddressVote(contractHash,account,function(t,e){$("#vote-choice-"+parseInt(e)).html("VOTED"),$("#vote-choice-"+parseInt(e)).addClass("votegray")}),getBalance(account,function(t){$("#mytokens").html(t+" "+erc20Symbol)}),fetchVotes(votersLimit,0)};$(document).ready(function(){$.getScript("js/constants.js",function(){waitForWeb3()})});
